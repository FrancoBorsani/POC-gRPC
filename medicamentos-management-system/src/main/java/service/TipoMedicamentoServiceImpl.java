package service;

import client.ResultClient;
//import com.medicamentos_management.stubs.medicamento.*;

//import com.medicamentos_management.stubs.medicamento.*;
import com.google.protobuf.Empty;
import com.medicamentos_management.stubs.tipoMedicamento.TipoMedicamentoServiceGrpc;
import com.medicamentos_management.stubs.tipoMedicamento.TipoMedicamentoRequest;
import com.medicamentos_management.stubs.tipoMedicamento.TipoMedicamentoResponse;

import com.medicamentos_management.stubs.tipoMedicamento.IdBajaRequest;

import domain.TipoMedicamento;
import dao.TipoMedicamentoDao;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Status;
import io.grpc.stub.StreamObserver;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class TipoMedicamentoServiceImpl extends TipoMedicamentoServiceGrpc.TipoMedicamentoServiceImplBase {
    // We need to have an instance of the dao class to work with the database
    private TipoMedicamentoDao tipoMedicamentoDao = new TipoMedicamentoDao();
    // Let's use a logger to log everything that we want
    private static final Logger logger = Logger.getLogger(TipoMedicamentoServiceImpl.class.getName());

    // We have to override the getStudentInfo that was defined in the StudentService class
    // The StudentService class is an autogenerated class by the proto file
    // So, let's override the getStudentInfo method here.
    @Override
    public void altaTipoMedicamento(TipoMedicamentoRequest request, StreamObserver<TipoMedicamentoResponse> responseObserver) {
        int id = request.getId();
        String nombre = request.getNombre();

        try{
            TipoMedicamento tipoMedicamento = tipoMedicamentoDao.guardarTipo(id, nombre, true); // Let's find the student information from the student table

            TipoMedicamentoResponse tipoMedicamentoResponse = TipoMedicamentoResponse.newBuilder()
                    .setId(id)
                    .setNombre(nombre)
                    .build();
            /*
                gRPC works in an asynchronous manner, so if you have ever worked with asynchronous programming
                you would know what will happen with following two methods.
                with the onNext method we send the response, once the response is sent we use onCompleted()
            */
            responseObserver.onNext(tipoMedicamentoResponse);
            responseObserver.onCompleted();
        }catch (NoSuchElementException e){
            logger.log(Level.SEVERE, "NO TIPO MEDICAMENTO FOUND WITH THE TIPO MEDICAMENTO ID :- "+id);

            // If some error occurs we sent an error with the following status which is not_found
            responseObserver.onError(Status.NOT_FOUND.asRuntimeException());
        }
    }





    @Override
    public void bajaTipoMedicamento(IdBajaRequest request, StreamObserver<IdBajaRequest> responseObserver) {
        int id = request.getId();

        try{
            int baja = tipoMedicamentoDao.bajaTipo(id); // Let's find the student information from the student table

            /*
                gRPC works in an asynchronous manner, so if you have ever worked with asynchronous programming
                you would know what will happen with following two methods.
                with the onNext method we send the response, once the response is sent we use onCompleted()
            */

            IdBajaRequest idBaja = IdBajaRequest.newBuilder()
                    .setId(1)
                    .build();


            responseObserver.onNext(idBaja);
            responseObserver.onCompleted();
        }catch (NoSuchElementException e){
            logger.log(Level.SEVERE, "NO MEDICAMENTO FOUND WITH THE MEDICAMENTO ID :- ");

            // If some error occurs we sent an error with the following status which is not_found
            responseObserver.onError(Status.NOT_FOUND.asRuntimeException());
        }
    }










}